# pytest.ini
# 作用：pytest测试框架配置文件
# 功能：
#   - 定义测试发现规则
#   - 配置测试执行选项
#   - 设置覆盖率报告

[pytest]
# ========== 测试发现配置 ==========
# 测试文件搜索路径
testpaths = tests

# 测试文件命名模式
python_files = test_*.py

# 测试类命名模式
python_classes = Test*

# 测试函数命名模式
python_functions = test_*

# 排除目录
norecursedirs = .git .tox dist build *.egg htmlcov

# ========== 测试执行配置 ==========
addopts = 
    # 详细输出
    -v
    # 显示详细的断言信息
    -vv
    # 显示测试中的print输出
    -s
    # 简短的错误追踪
    --tb=short
    # 严格标记（未注册的marker会报错）
    --strict-markers
    # 显示最慢的10个测试
    --durations=10
    # 覆盖率检查app目录
    --cov=app
    # 生成HTML覆盖率报告
    --cov-report=html
    # 终端显示缺失的行号
    --cov-report=term-missing
    # 覆盖率阈值（暂时设为0，后续可提高）
    --cov-fail-under=0
    # 警告设置
    -W ignore::DeprecationWarning
    # 忽略特定文件（集成测试脚本，需要本地环境）
    --ignore=tests/test_all.py
    --ignore=tests/test_debug.py
    --ignore=tests/test_parser.py
    --ignore=tests/test_health.py
    --ignore=tests/test_upload.py
    # 忽略依赖app.agents.serial的测试（该模块不上传）
    --ignore=tests/test_communication_agent.py
    --ignore=tests/test_memory_integration.py
    # 忽略需要完整服务器的测试
    --ignore=tests/test_api_endpoints.py
    --ignore=tests/test_batch_processing.py
    --ignore=tests/test_memory_api.py
    # 忽略集成测试脚本（不是标准pytest，需要串行运行）
    --ignore=tests/test_tools.py

# ========== 标记定义 ==========
markers =
    unit: Unit tests (快速，无外部依赖)
    integration: Integration tests (需要外部服务)
    slow: Slow tests (执行时间>1秒)
    memory: Memory system tests
    workflow: Workflow tests
    api: API endpoint tests

# ========== 日志配置 ==========
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# ========== 异步测试配置 ==========
asyncio_mode = auto

# ========== 覆盖率详细配置 ==========
[coverage:run]
# 源代码路径
source = app

# 排除不需要覆盖的文件
omit = 
    */tests/*
    */test_*.py
    */__pycache__/*
    */site-packages/*
    */venv/*
    */migrations/*
    */config.py
    app/websocket.py

# 分支覆盖率
branch = True

# 并行模式
parallel = True

[coverage:report]
# 精度
precision = 2

# 跳过空文件
skip_empty = True

# 排除的行（通过注释标记）
exclude_lines =
    # 标准排除
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    # 类型检查
    if TYPE_CHECKING:
    @abstractmethod
    # 调试代码
    def __str__
    print\(

# 显示缺失的行
show_missing = True

# 按文件名排序
sort = Name

[coverage:html]
# HTML报告输出目录
directory = htmlcov

# 报告标题
title = Shadow Writing Agent Coverage Report
